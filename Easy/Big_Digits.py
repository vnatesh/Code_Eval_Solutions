"""
BIG DIGITS
CHALLENGE DESCRIPTION:

In this challenge you're presented with a situation in which you need to output big symbols on devices which only support ASCII characters and single, fixed-width fonts. To do this you're going to use pseudo-graphics to ‘draw’ these big symbols.

Here is an example of the font with digits from 0 to 9:



-**----*--***--***---*---****--**--****--**---**--
*--*--**-----*----*-*--*-*----*-------*-*--*-*--*-
*--*---*---**---**--****-***--***----*---**---***-
*--*---*--*-------*----*----*-*--*--*---*--*----*-
-**---***-****-***-----*-***---**---*----**---**--
--------------------------------------------------
Each pixel is marked either with asterisk ‘*’ or with minus ‘-’. Size of a digit is 5×6 pixels.

Your task is to write a program, which outputs the numbers given to you with the font as in the example.


INPUT SAMPLE:



The first argument is a file that contains the lines with digits sequences you need to magnify. E.g.:


3.1415926
1.41421356
01-01-1970
2.7182818284
4 8 15 16 23 42


OUTPUT SAMPLE:

Print to stdout the magnified digits:



***----*---*-----*--****--**--***---**--
---*--**--*--*--**--*----*--*----*-*----
-**----*--****---*--***---***--**--***--
---*---*-----*---*-----*----*-*----*--*-
***---***----*--***-***---**--****--**--
----------------------------------------
--*---*-----*---*---***----*--***--****--**--
-**--*--*--**--*--*----*--**-----*-*----*----
--*--****---*--****--**----*---**--***--***--
--*-----*---*-----*-*------*-----*----*-*--*-
-***----*--***----*-****--***-***--***---**--
---------------------------------------------
-**----*---**----*----*---**--****--**--
*--*--**--*--*--**---**--*--*----*-*--*-
*--*---*--*--*---*----*---***---*--*--*-
*--*---*--*--*---*----*-----*--*---*--*-
-**---***--**---***--***--**---*----**--
----------------------------------------
***--****---*---**--***---**----*---**--***---**---*---
---*----*--**--*--*----*-*--*--**--*--*----*-*--*-*--*-
-**----*----*---**---**---**----*---**---**---**--****-
*-----*-----*--*--*-*----*--*---*--*--*-*----*--*----*-
****--*----***--**--****--**---***--**--****--**-----*-
-------------------------------------------------------
-*----**----*--****---*---**--***--***---*---***--
*--*-*--*--**--*-----**--*-------*----*-*--*----*-
****--**----*--***----*--***---**---**--****--**--
---*-*--*---*-----*---*--*--*-*-------*----*-*----
---*--**---***-***---***--**--****-***-----*-****-
--------------------------------------------------


CONSTRAINTS:

Input lines are up to 16 symbols long.
Input can contain some other symbols, which should be ignored (i.e. points, hyphens, spaces); only numbers must be printed out.

"""


m={'0':['-**--','*--*-','*--*-','*--*-','-**--','-----'],'1':['--*--','-**--','--*--','--*--','-***-','-----'],'2':['***--','---*-','-**--','*----','****-','-----'],'3':['***--','---*-','-**--','---*-','***--','-----'],'4':['-*---','*--*-','****-','---*-','---*-','-----'],'5':['****-','*----','***--','---*-','***--','-----'],'6':['-**--','*----','***--','*--*-','-**--','-----'],'7':['****-','---*-','--*--','-*---','-*---','-----'],'8':['-**--','*--*-','-**--','*--*-','-**--','-----'],'9':['-**--','*--*-','-***-','---*-','-**--','-----']}

import sys,string
test_cases=open(sys.argv[1],'r')
for i in test_cases.read().split('\n'):
    if i!='':
        i=[j for j in i if j in string.digits]
        list1=[m[x][0] for x in i]
        list2=[m[x][1] for x in i]
        list3=[m[x][2] for x in i]
        list4=[m[x][3] for x in i]
        list5=[m[x][4] for x in i]
        list6=[m[x][5] for x in i]
        print ''.join(list1)
        print ''.join(list2)
        print ''.join(list3)
        print ''.join(list4)
        print ''.join(list5)
        print ''.join(list6)
        
        
        
